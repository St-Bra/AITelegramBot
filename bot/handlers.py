from telegram import Update
from telegram.ext import ContextTypes, CallbackContext
from asgiref.sync import sync_to_async

from bot.models import BotUser
from core.models import Currency, HistoricalRate
from datetime import date, timezone
from forecast.models import Forecast, ForecastAccuracy


@sync_to_async
def get_eur_rates():
    try:
        usd = Currency.objects.get(code="USD")
        btc = Currency.objects.get(code="BTC")
    except Currency.DoesNotExist:
        return None

    today = date.today()

    usd_rate_obj = HistoricalRate.objects.filter(currency=usd, date=today).first()
    btc_rate_obj = HistoricalRate.objects.filter(currency=btc, date=today).first()

    if not usd_rate_obj or not btc_rate_obj:
        return None

    return usd_rate_obj.rate, btc_rate_obj.rate


@sync_to_async
def get_forecasts():
    eur = Currency.objects.get(code='EUR')
    today = date.today()
    return list(Forecast.objects.filter(currency=eur, forecast_date__gte=today).order_by('forecast_date')[:7])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await register_user(update)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç. –ß—Ç–æ –±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π /help.")


async def eur(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rates = await get_eur_rates()
    if rates:
        usd_rate, btc_rate = rates
        text = f"1 EUR = {usd_rate} USD\n1 EUR = {btc_rate} BTC"
        await update.message.reply_text(text)
    else:
        await update.message.reply_text("–ö—É—Ä—Å—ã –µ–≤—Ä–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    forecasts = await get_forecasts()
    if not forecasts:
        await update.message.reply_text("–ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    text = "–ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ –µ–≤—Ä–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏:\n"
    for f in forecasts:
        text += f"{f.forecast_date}: 1 EUR = {f.predicted_rate:.4f} USD\n"

    await update.message.reply_text(text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/eur - —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –µ–≤—Ä–æ\n"
        "/forecast - –ø—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ –µ–≤—Ä–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"
    )
    await update.message.reply_text(text)

@sync_to_async
def register_user(update):
    """Create or update BotUser when /start is received"""
    tg_user = update.effective_user
    BotUser.objects.update_or_create(
        telegram_id=tg_user.id,
        defaults={
            'username': tg_user.username,
            'language_code': tg_user.language_code or 'en'
        }
    )

# === –ü–æ–¥–ø–∏—Å–∫–∞ ===
@sync_to_async
def set_subscription(telegram_id, subscribe=True):
    user, _ = BotUser.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={
            "username": "",
            "language_code": "en"
        }
    )
    user.is_subscribed = subscribe
    user.save()
    return user

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_subscription(update.effective_user.id, True)
    await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ EUR!")

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await set_subscription(update.effective_user.id, False)
    await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.")

# === –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ ===
@sync_to_async
def get_last_accuracy_records(days=7):
    return list(
        ForecastAccuracy.objects
        .select_related('forecast')  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π forecast —Å—Ä–∞–∑—É
        .order_by('-forecast__forecast_date')[:days]
    )

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    records = await get_last_accuracy_records()
    if not records:
        await update.message.reply_text("üì≠ –î–∞–Ω–Ω—ã—Ö –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
    for record in records:
        # –¢–µ–ø–µ—Ä—å record.forecast —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –±—É–¥–µ—Ç
        text += f"{record.forecast.forecast_date}: {record.accuracy:.2f}%\n"

    await update.message.reply_text(text)